---
# omit title and subtitle if you're doing a custom title block
title: Unpaid work across Asia-Pacific
subtitle: Surveys by Facebook owner Meta during the pandemic reveal differences between men and women across Asia-Pacific in the **number of hours spent each day on unpaid domestic and care work**.
# for social previews
pagetitle: Unpaid work across Asia-Pacific
description: Surveys by Facebook owner Meta during the pandemic reveal differences between men and women across Asia-Pacific in the number of hours spent each day on unpaid domestic and care work.
twitter-card:
  site: "@360info_global"
  image: "/timeuse-meta/unpaidwork-meta-banner.png"
open-graph:
  image: "/timeuse-meta/unpaidwork-meta-banner.png"
resources:
  - unpaidwork-meta-banner.png
format:
  360-embed-html: default
# metadata for modals and embed sharing functionality
360embed:
  byline: James Goldie, 360info
  data-source: GEAH, Meta
  type: chart
  aspect-ratio: 2 / 3
  min-height: 545px
  max-height: 893px
  bg-colour: white
  title: "Interactive: Unpaid work across Asia-Pacific"
  repo: report-women-unpaid-work
  domain: https://unpaidwork.360visuals.org
  path: /timeuse-meta/
  fragments: ""
  about: |
    The data from this visual comes from Meta's [Survey on Gender Equality at Home](https://dataforgood.facebook.com/dfg/tools/survey-on-gender-equality-at-home). The surveys were carried out in 2020 and 2021.<br><br>

    The survey asked respondents how many hours they spent per day on unpaid domestic and care work. The published data then groups the responses into amounts of work (no work, less than 1 hour/day, 1-2 hours/day, etc.).<br><br>
    
    The visual shows the proportion of men and women in each country who responded in a given group. More blue means more respondents spent a small amount of time (or none); more red means more respondents spent a lot of time.<br><br>

    Meta did not disclose the number of people surveyed in each country.
---

```{ojs}
//| label: load-data
allData = FileAttachment("/data/geah2021-hrs-domestic-care.csv")
  .csv({ typed: true });
allCountries = Array.from(new Set(allData.map(d => d.geography)));

// fix up 0 values not getting stringified, and
// assign facets for manual wrapping
timeUse = allData
  .filter(d => d.gender != "Combined")
  .map(d => ({ ...d,
    response_category: d.response_category.toString() + " hrs",
    fx: allCountries.indexOf(d.geography) % 2,
    fy: Math.floor(allCountries.indexOf(d.geography) / 2)
  }));

// define for stacking order
timeUseLevels =
  ["0 hrs", "<1 hrs", "1-2 hrs", "2-3 hrs", "3-4 hrs", "4-5 hrs", "5-7 hrs",
   "7-9 hrs", "9-11 hrs", ">11 hrs"];

// need country names and facet indices de-duplicated too for labels
// (pinched from https://stackoverflow.com/a/36744732/3246758 to avoid using aq)
countryLabels =
  timeUse.filter((value, index, self) =>
    index === self.findIndex(t => (t.geography === value.geography)));

```

```{ojs}
//| label: controls
viewof facetChoice = Inputs.radio(
  ["On gender", "On country"], {
    value: "On gender"
  });

// channels used in plot depend on selection
channels = ({
  "On gender":  { y: "geography", fx: "gender", fy: null },   
  "On country": { y: "gender",    fx: "fx",     fy: "fy" }
})
```

```{ojs}
//| label: plot-data
Plot = import("https://esm.run/@observablehq/plot@0.6.13")

Plot.plot({
  marks: [
    Plot.barX(timeUse, {
      y: channels[facetChoice].y,
      x: "value",
      fx: channels[facetChoice].fx,
      fy: channels[facetChoice].fy,
      fill: "response_category",
      order: timeUseLevels
    }),
    // label country facets manually
    facetChoice == "On country" ?
      Plot.text(countryLabels, {
        fx: "fx",
        fy: "fy",
        frameAnchor: "top-left",
        dy: -16,
        text: "geography",
        fontWeight: "bold"
      }) : null,
    // add facet axis marks for country comparison to remove default facet label
    facetChoice == "On country" ? Plot.axisFx({
      color: "transparent"
    }) : null,
    facetChoice == "On country" ? Plot.axisFy({
      color: "transparent"
    }) : null,
    // draw grid on top
    Plot.gridX({
      interval: 20,
      stroke: "white",
      strokeOpacity: 0.75,
      strokeDasharray: "2"
    }),
    Plot.tip(timeUse, Plot.pointer(Plot.stackX({
      y: channels[facetChoice].y,
      x: "value",
      fx: channels[facetChoice].fx,
      fy: channels[facetChoice].fy,
      fill: "response_category",
      order: timeUseLevels,
      channels: {
        "Response": {
          label: "Response",
          value: d => d.response_category + " hours per day"
        },
        "Share": {
          label: "Share",
          value: d => d.value + "% of respondents"
        }
      },
      format: {
        fx: false,
        fy: false,
        x: false,
        y: false,
        fill: false
      },
    })))
  ],
  color: {
    legend: true,
    swatchHeight: 25,
    swatchWidth: 25,
    style: {
      fontFamily: "Roboto Condensed",
      fontSize: "90%",
    },
    columns: 5,
    type: "ordinal",
    scheme: "BuRd",
    domain: timeUseLevels
  },
  x: {
    label: null,
    ticks: 6,
    tickFormat: d => d + "%"
  },
  y: {
    label: null
  },
  fx: {
    label: null,
    padding: 0.2
  },
  fy: {
    label: null,
    padding: 0.3
  },
  style: {
    fontSize: 16,
    fontFamily: "Roboto Condensed",
    // fontWeight: "bold"
  },
  marginLeft: 110,
  height: 600
});
```

{{< include _popups/_buttons.qmd >}}

{{< include _popups/_dialogs.qmd >}}
